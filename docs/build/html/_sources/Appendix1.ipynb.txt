{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Appendix 1:  `bash` help\n",
    "\n",
    "To use `librat`, we need to have a passing awareness of some computer system settings called [environment variables](https://en.wikipedia.org/wiki/Environment_variable). We do this in this chapter, alongside a few other basic linux/unix commands that may be useful to know. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "env: BPMS=/Users/plewis/librat\n",
      "env: PATH=/Users/plewis/librat/bin:/Users/plewis/librat/src:/Users/plewis/librat/bin/csh:/Users/plewis/opt/anaconda3/bin:/Users/plewis/opt/anaconda3/condabin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/TeX/texbin:/opt/X11/bin:/Library/Apple/usr/bin\n",
      "env: MATLIB=/Users/plewis/librat/obj\n",
      "env: BPMSROOT=/Users/plewis/librat/obj\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "from prelim import *\n",
    "%set_env BPMS=$BPMS \n",
    "%set_env PATH=$BPMS/bin:$BPMS/src:$BPMS/bin/csh:$PATH_\n",
    "%set_env MATLIB=$BPMS/obj\n",
    "%set_env BPMSROOT=$BPMS/obj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "In practical terms, the important thing here is that you can generate the file `test/test_examples/init.sh` and modify it to your needs. The rest you can skip for now, if you really want to. But you may well find yourself returning to this chapter when you want to ask more of your computer and of this tool.\n",
    "\n",
    "Our focus will be on [bash](https://opensource.com/article/19/8/what-are-environment-variables) environment variables. \n",
    "\n",
    "This chapter is not generally critical for understanding `librat` but may help if you go into any details on your setup, or have problems.\n",
    "\n",
    "The chapter covers:\n",
    "\n",
    "- Introduction to shell and environment variables\n",
    "- Some important environment variables and related\n",
    "- Important environment variables for librat\n",
    "\n",
    "\n",
    "## Introduction to shell and environment variables\n",
    "\n",
    "\n",
    "### `export`\n",
    "\n",
    "An **environment variable** is one that is passed through from a shell to any child processes.\n",
    "\n",
    "We can recognise these as they are usually defined in upper case (capital letters), and (in bash) defined with a `export` command: e.g.:\n",
    "\n",
    "    export MATLIB=test/test_examples\n",
    "\n",
    "In this case, this would set the environment variable called  `MATLIB` to `test/test_examples`. The syntax is:\n",
    "\n",
    "\n",
    "    export NAME=value\n",
    "    \n",
    "    \n",
    "### White space and single quotes `'`\n",
    "\n",
    "If `value` has white space (gaps in the name), it will need quotes to contain the string, e.g.:\n",
    "\n",
    "    export SOMEHWERE='C:/Program Files'\n",
    "\n",
    "\n",
    "Here, we contain the string `C:/Program Files`, which has white space, in single quotes (`'`). Its a good idea to avoid white space in filenames as they can cause problems. Use dash `-` or underscore `_` instead.\n",
    "\n",
    "### `echo`\n",
    "\n",
    "We can see the value a variable is set to with the command `echo`,  and refer to the *value* of a variable with a `$` symbol e.g.:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MATLIB is set to /Users/plewis/librat/obj\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "export MATLIB=$BPMS/obj\n",
    "echo \"MATLIB is set to $MATLIB\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that there must be no gaps in `NAME=value` part of the statement. That is a typical thing for new users to get wrong and which can cause problems.\n",
    "\n",
    "### Double quotes `\"` and backslash escape `/`\n",
    "\n",
    "If you want to replace the value of a variable in a string, then you should generally use double quotes (`\"`) instead of single quotes `'` as above:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. MATLIB is set to $MATLIB in single quotes\n",
      "2. MATLIB is set to /Users/plewis/librat/obj in double quotes\n",
      "2. MATLIB is set to $MATLIB in double quotes but with \\ escaping the $\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "export MATLIB=$BPMS/obj\n",
    "\n",
    "echo '1. MATLIB is set to $MATLIB in single quotes'\n",
    "echo \"2. MATLIB is set to $MATLIB in double quotes\"\n",
    "echo \"2. MATLIB is set to \\$MATLIB in double quotes but with \\ escaping the \\$\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, we can also 'escape' the interpretation of the `$` symbol in the double quoted string, with the backslash [escape symbol](https://www.shellscript.sh/escape.html) `\\`, as in example 3.\n",
    "\n",
    "### `env`, `grep`, pipe `|`\n",
    "\n",
    "To see the values of all environment variables, type `env` (or `printenv`). Because this list can be quite long, we might want to select only certain lines from the list. One way to do this is to use the command [grep](https://en.wikipedia.org/wiki/Grep), which searches for patterns in the each line:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TERM_PROGRAM=Apple_Terminal\n",
      "TERM=xterm-color\n",
      "TMPDIR=/var/folders/mp/9cxd5s793bjd4q3zng6dv_cw0000gn/T/\n",
      "TERM_PROGRAM_VERSION=433\n",
      "CONDA_PROMPT_MODIFIER=(base) \n",
      "SKY_ILLUMINATION==/Users/plewis/librat/obj\n",
      "TERM_SESSION_ID=D1A31568-329D-434C-986B-E84F76B8FCB3\n",
      "BPMS=/Users/plewis/librat\n",
      "TEMP=/tmp\n",
      "DIRECT_ILLUMINATION=/Users/plewis/librat/obj\n",
      "KERNEL_LAUNCH_TIMEOUT=40\n",
      "MATLIB=/Users/plewis/librat/obj\n",
      "PATH=/Users/plewis/librat/src:/Users/plewis/librat/bin:/Users/plewis/librat/src:/Users/plewis/librat/bin/csh:/Users/plewis/opt/anaconda3/bin:/Users/plewis/opt/anaconda3/condabin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/TeX/texbin:/opt/X11/bin:/Library/Apple/usr/bin\n",
      "MPLBACKEND=module://ipykernel.pylab.backend_inline\n",
      "BPMSROOT=/Users/plewis/librat/obj\n",
      "XPC_SERVICE_NAME=0\n",
      "_CE_M=\n",
      "HOME=/Users/plewis\n",
      "BPMS_FILES=/Users/plewis/librat/obj\n",
      "LOGNAME=plewis\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "export MATLIB=$BPMS/obj\n",
    "\n",
    "env | grep M"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we ['pipe'](https://en.wikipedia.org/wiki/Pipeline_(Unix)) the output of the command `env` into the command `grep` with the pipe symbol `|`. `grep M` will filter only lines containing the character `M`. We see that this includes the variable `MATLIB` that we have set.\n",
    "\n",
    "```\n",
    "EXERCISE\n",
    "\n",
    "1. Try removing the '| grep M' above to see the full list of environment variables.\n",
    "2. Try some other 'grep' filters, such as filtering lines containing the string 'PATH'\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shell variable\n",
    "\n",
    "A **shell variable** is one that is *not* passed through from a shell to any child processes. It is only relevant to the shell it is run in.\n",
    "\n",
    "These are sometimes set as lower case variables (to distinguish from environment variables). The syntax is similar to that of the environment variable, but without the `export`. The syntax is:\n",
    "\n",
    "    name=value\n",
    "    \n",
    "for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello world plewis\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "hello=\"hello world $USER\"\n",
    "echo $hello"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `set`, `head` , `tail`\n",
    "\n",
    "We can see the values of shell variables with the `set` command. \n",
    "\n",
    "Like `env`, this is likely to produce a long list. We could filter as above, with `grep`, or here, we use `tail` to take the *last* `N` lines produced or `head` for the first `N` lines. The syntax is:\n",
    "\n",
    "    head -N\n",
    "    tail -N\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------\n",
      "1. The first 5 shell variables ...\n",
      "--------------------\n",
      "BASH=/bin/bash\n",
      "BASH_ARGC=()\n",
      "BASH_ARGV=()\n",
      "BASH_LINENO=()\n",
      "BASH_SOURCE=()\n",
      "\n",
      "--------------------\n",
      "2. The last 5 shell variables ...\n",
      "--------------------\n",
      "XPC_SERVICE_NAME=0\n",
      "_=--------------------\n",
      "_CE_CONDA=\n",
      "_CE_M=\n",
      "__CF_USER_TEXT_ENCODING=0x1F5:0:2\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "echo '--------------------'\n",
    "echo \"1. The first 5 shell variables ...\"\n",
    "echo '--------------------'\n",
    "set | head -5\n",
    "echo \n",
    "\n",
    "echo '--------------------'\n",
    "echo \"2. The last 5 shell variables ...\"\n",
    "echo '--------------------'\n",
    "set | tail -5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some important environment variables and related \n",
    "\n",
    "When running *any* code, we should be aware of the following shell environment variables:\n",
    "\n",
    "```\n",
    "    PATH\n",
    "    LD_LIBRARY_PATH\n",
    "    DYLD_LIBRARY_PATH\n",
    "    \n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "### `PATH`\n",
    "\n",
    "[$PATH](https://opensource.com/article/17/6/set-path-linux) tells the [shell](https://www.gnu.org/software/bash/) where to look for executable files (codes that it can run). This is simply a list of locations (directories) in the computer file system that the shell will look. Elements of the list are separated by `:`. so, if for example we have the `PATH`:\n",
    "\n",
    "```\n",
    "    PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n",
    "```\n",
    "\n",
    "and tell the shell to run an executable called [ls](https://en.wikipedia.org/wiki/Ls), then it will first look in `/usr/local/bin`, then `/usr/bin` and so on, until it finds `ls`. \n",
    "\n",
    "We have used double quotes `\"` around the variable, in case any of the elements had white space (they don't here).\n",
    "\n",
    "\n",
    "### `which`\n",
    "\n",
    "We can see which one it finds with the command [which](https://en.wikipedia.org/wiki/Which_(command)):\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/ls\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "which ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `ls`\n",
    "\n",
    "As we saw above, [ls](https://en.wikipedia.org/wiki/Ls) gives a listing of files and directories. If we use the `-C` option, it outputs multiple columns of information, which is handy if there are lots of entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Appendix1.ipynb\t\t\tconf.py\n",
      "Chapter1.ipynb\t\t\tdefault.profraw\n",
      "Chapter2.ipynb\t\t\tindex.rst\n",
      "RATstart.ipynb\t\t\tipython_kernel_config.py\n",
      "RATstartOptions.ipynb\t\tprelim.py\n",
      "__pycache__\t\t\treferences.bib\n",
      "_static\t\t\t\trequirements.txt\n",
      "_templates\t\t\ttest\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "# get a listing of the current directory, just to see whats here\n",
    "ls -C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `.bash_profile`, `.bashrc`, wildcard `*`\n",
    "\n",
    "These core environment variables are usually set with default values appropriate to your system. This may be done in [system-wide files such as /etc/profile, or personal files](https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html) such as `~/.bashrc` or `~/.bash_profile`, where `~` is the symbol for your home directory. This will almost certainly set `$PATH`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/plewis/.bash_history\n",
      "/Users/plewis/.bash_profile\n",
      "/Users/plewis/.bash_profile-anaconda3.bak\n",
      "/Users/plewis/.bash_profile.backup\n",
      "/Users/plewis/.bash_sessions\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "# -d -> no directories\n",
    "\n",
    "ls -Cd  ~/.bash*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "above, we use the wildcard symbol `*`, interpreted by the shell as any file matching the pattern `~/.bash*` with `*` being zero or more characters. The `~` is matched to the user's home directory name in this case.\n",
    "\n",
    "For many purposes, the default options to `ls` will do. The `-C` option we would hardly use, but is useful above for better note formatting. The `-d` option is again rarely used, but useful in this case as we only want to see files in the home directory. \n",
    "\n",
    "\n",
    "### `ls -l`\n",
    "\n",
    "One useful option to `ls` is `-l`, that gives 'long listing':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-------    1 plewis  staff   1.5K 21 Apr 10:26 /Users/plewis/.bash_history\n",
      "-rw-r--r--    1 plewis  staff   3.0K 17 Apr 17:00 /Users/plewis/.bash_profile\n",
      "-rw-r--r--    1 plewis  staff   1.1K 15 Jul  2019 /Users/plewis/.bash_profile-anaconda3.bak\n",
      "-rw-r--r--    1 plewis  staff   727B 15 Jul  2019 /Users/plewis/.bash_profile.backup\n",
      "drwx------  111 plewis  staff   3.5K 21 Apr 10:26 /Users/plewis/.bash_sessions\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "# -d -> no directories\n",
    "\n",
    "ls -lhd  ~/.bash*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `-l` option gives the file sizes and other useful information in this 'long' listing. The file sizes here are given in `K` or other human-readable (^3) units, as we have set the `-h` option. Many unix commands that involve file sizes will have a similar `-h` option.\n",
    "\n",
    "The first set of information, such as `-rw-r--r--` gives us information on file permissions. It represents a 10-bit field, where bits are set 'on' (1) or off (0). After the first bit (the sticky bit), the fields are 3 sets of 3-bit fields (so, octal - base 8 = 2^3). These 3 bits represent `rwx`, with \n",
    "\n",
    "- `r`: read permission\n",
    "- `w`: write permission\n",
    "- `x`: execute permission\n",
    "\n",
    "So:\n",
    "\n",
    "- `rw-` means that permission is set for reading the file and writing to it\n",
    "- `r--` means reading but not writing\n",
    "- `rwx` means reading, writing and execute\n",
    "\n",
    "The first set of 3 bits represents permissions for the file owner, the second for users in the same group, and the third for all users (others).\n",
    "\n",
    "So:\n",
    "\n",
    "- `-rw-r--r--` means read and write for the owner, but only read permission for group and all. This is the typical setting for a non-executable file: everyone can read it, but only the owner can write. In octal, this is 644.\n",
    "- `-rwxr-xr-x` means read, write and execute for the owner, and read and execute permission for others. This is the typical setting for an executable file: everyone can execute it and read it, but only the owner can write. In octal, this is 755.\n",
    "\n",
    "In fact, the final 'bit', known as the [sticky bit](https://en.wikipedia.org/wiki/Sticky_bit) can have more settings than just `-` or `x`, but we need not worry about that here.\n",
    "\n",
    "\n",
    "### `chmod`, `>`, `rm -f`, `mkdir -p`\n",
    "\n",
    "We can change the file permissions, using the command [chmod](https://en.wikipedia.org/wiki/Chmod). Most typically, we use options such as `+x` to add an executable bit, or `go-r` to remove read permissions (for group and other, here).\n",
    "\n",
    "We create a file in a directory `files.$$`, where `$$` is the [shell process ID](https://en.wikipedia.org/wiki/Process_identifier) which we can use to give probably a unique directory name (i.e. one very unlikely to be created by any other process). First, we must create (make) the directory if it doesn't already exist. This is done with `mkdir -p`. The `-p` option will not fail if the directory alreay exists, and also will create any depth of directories specified.\n",
    "\n",
    "The file is called `files/hello.dat` and is created by [redirecting the standard output](https://en.wikipedia.org/wiki/Redirection_(computing)) (`stdout`) of a command to a file, i.e. sending the text coming from `echo \"hello world\"` into the file. The symbol for redirection of `stdout` is `>`. This redirection is the same process used above when we redirected output to a pipe.\n",
    "\n",
    "Just in case the file already exists, and we have previously messed around with the file permissions, we first run the command `rm -f` to delete (remove) the file. The `-f` option tells us to 'force' this, regardless of the file's permissions or whether the file already exists. At the end of the shell, we use `rm -rf` to delete the directory and anythinbg in it (a recursice delete)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-r--r--  1 plewis  wheel    12B 21 Apr 18:47 /tmp/files.29478/hello.dat\n",
      "-rw-------  1 plewis  wheel    12B 21 Apr 18:47 /tmp/files.29478/hello.dat\n",
      "-rwx------  1 plewis  wheel    12B 21 Apr 18:47 /tmp/files.29478/hello.dat\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "# create a unique directory name\n",
    "dir=/tmp/files.$$\n",
    "\n",
    "# make directory\n",
    "mkdir -p $dir\n",
    "\n",
    "# force delete the file, in case it exists\n",
    "rm -f $dir/hello.dat\n",
    "\n",
    "# generate the file\n",
    "# it should contain 11 characters (bytes) plus\n",
    "# an End Of File (EOF) character (^D), so 12B\n",
    "echo \"hello world\" > $dir/hello.dat\n",
    "\n",
    "# listing\n",
    "# The default permission should be rw-r--r--\n",
    "ls -lh $dir/hello.dat\n",
    "\n",
    "# We now remove the read permissions using chmod\n",
    "# The permission should be rw-------\n",
    "chmod go-r $dir/hello.dat\n",
    "ls -lh $dir/hello.dat\n",
    "\n",
    "# now add user execute \n",
    "chmod u+x $dir/hello.dat\n",
    "ls -lh $dir/hello.dat\n",
    "\n",
    "# clean up after ourselves\n",
    "# remove everything in files.$$, along with the directory\n",
    "rm -rf $dir"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `cat`\n",
    "\n",
    "We can use the command [cat](https://en.wikipedia.org/wiki/Cat_(Unix)) to create or to 'view' the contents of a file. For example, the command:\n",
    "\n",
    "    cat ~/.bash_profile\n",
    "    \n",
    "would 'print' (send to the terminal, rather) the contents of the file `~/.bash_profile`.\n",
    "\n",
    "Since this may be quite long, we will use `head` just to see the first `N` lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# added by Anaconda3 2019.03 installer\n",
      "# >>> conda init >>>\n",
      "# !! Contents within this block are managed by 'conda init' !!\n",
      "__conda_setup=\"$(CONDA_REPORT_ERRORS=false '/anaconda3/bin/conda' shell.bash hook 2> /dev/null)\"\n",
      "if [ $? -eq 0 ]; then\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "cat ~/.bash_profile | head -5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `pwd`, `cd`\n",
    "\n",
    "The command `pwd` returns the [current working directory](https://en.wikipedia.org/wiki/Pwd). This is extremely useful to know, especially as new users often get lost in a shell on the file system. To find out where you are, in a shell, type:\n",
    "\n",
    "    pwd\n",
    "    \n",
    "This will return the 'location' you are at in that shell.\n",
    "\n",
    "The command `cd` is used to change directory. The syntax is:\n",
    "\n",
    "    cd location\n",
    "    \n",
    "where `location` is somewhere on the file system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "where am I now?: /Users/plewis/librat/docs/source\n",
      "go home (~): \n",
      "where am I now?: /Users/plewis\n",
      "go to librat: \n",
      "where am I now?: /Users/plewis/librat\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "echo -n \"where am I now?: \"\n",
    "pwd\n",
    "\n",
    "# go home using 'cd ~''\n",
    "echo \"go home (~): \"\n",
    "cd ~\n",
    "echo -n \"where am I now?: \"\n",
    "pwd\n",
    "\n",
    "# go to directory librat 'cd librat'\n",
    "echo \"go to librat: \"\n",
    "cd $BPMS\n",
    "echo -n \"where am I now?: \"\n",
    "pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  `$(pwd)`\n",
    "\n",
    "Sometimes we want to set a variable to the result returned by running an executable. For example, the command `pwd` returns the [current working directory](https://en.wikipedia.org/wiki/Pwd). We can set a variable to this, with the following example syntax:\n",
    "\n",
    "    PWD=$(pwd)\n",
    "    \n",
    "Note the round brackets `$()` enclosing the command (`pwd` here)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Run the command pwd: /Users/plewis/librat/docs/source\n",
      "2. Set the variable PWD the result of running the command pwd with PWD=$(pwd):\n",
      "3. Now print that out: PWD is set to /Users/plewis/librat/docs/source\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "# set PWD to the result of running `pwd`\n",
    "echo -n \"1. Run the command pwd: \"\n",
    "pwd\n",
    "\n",
    "# Note the use of \\$ in printing here. This will make sure $ is printed, \n",
    "# rather than $(pwd) in this statement\n",
    "echo \"2. Set the variable PWD the result of running the command pwd with PWD=\\$(pwd):\"\n",
    "\n",
    "PWD=$(pwd)\n",
    "\n",
    "echo \"3. Now print that out: PWD is set to $PWD\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `${BPMS-$(pwd)}`\n",
    "\n",
    "In `bash` we often use syntax that only sets a valiable if it is not already set. This is done in the example:\n",
    "\n",
    "    BPMS=${BPMS-$(pwd)}\n",
    "    \n",
    "where some variable `BPMS` is set to the result of running `pwd`, unless it is already set.\n",
    "\n",
    "Note the curley brackets in `${}`. \n",
    "\n",
    "Note that the environment `BPMS` is generally used to define the top level directory of `librat` codes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. BPMS set to /Users/plewis/librat because BPMS is set\n",
      "2. BPMS set to /Users/plewis/librat/docs/source, from running pwd, because BPMS is not set\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "#\n",
    "# example using ${BPMS-$(pwd)}\n",
    "#\n",
    "\n",
    "# set BPMS variable to result of pwd, unless its already set\n",
    "BPMS=${BPMS-$(pwd)}\n",
    "echo \"1. BPMS set to $BPMS because BPMS is set\"\n",
    "\n",
    "# unset the variable, so its no longer set\n",
    "unset BPMS\n",
    "BPMS=${BPMS-$(pwd)}\n",
    "echo \"2. BPMS set to $BPMS, from running pwd, because BPMS is not set\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### edit\n",
    "\n",
    "\n",
    "\n",
    "If you want to make changes to important environment variables, you would normally edit them in your `.bash_profile` file in your home directory. Here is an exercise to do that. It assumes that you know: (i) the location in the filesystem of your librat distribution; (ii) some text file editor (N.B. **Not** Microsoft word or similar: that is a word processor, not a text editor!). Examples would be:\n",
    "\n",
    "| ![MacOS](../res/apple_med.png) |![Windows](../res/win_med.png) | ![linux](../res/linux_med.png)|\n",
    "|:-:|:-:|:-:|\n",
    "| [textedit](https://en.wikipedia.org/wiki/TextEdit) | [Notepad](https://en.wikipedia.org/wiki/Microsoft_Notepad) | [gedit](https://en.wikipedia.org/wiki/Gedit) |\n",
    "| [vi(m)](https://en.wikipedia.org/wiki/Vim_(text_editor)) | [vi(m)](https://en.wikipedia.org/wiki/Vim_(text_editor)) | [vi(m)](https://en.wikipedia.org/wiki/Vim_(text_editor)) |\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "```\n",
    "EXERCISE\n",
    "\n",
    "    1. Make a copy of your ~/.bash_profile, just in case you mess things up. Do this only the once!\n",
    "\n",
    "        cp ~/.bash_profile ~/.bash_profile.bak\n",
    "\n",
    "    If the file doesn't already exist, don't worry about this part\n",
    "\n",
    "    2. Find out where your librat installation is located e.g. /Users/plewis/librat)\n",
    "\n",
    "    3. Now, edit the file ~/.bash_profile and add a line at the end of the file that says (the *equivalent* of):\n",
    "\n",
    "        export BPMS=/Users/plewis/librat\n",
    "\n",
    "    where you use the location of your librat distribution.\n",
    "\n",
    "    4. Save the file and quit the editor.\n",
    "\n",
    "    5. Open a new shell. At the command prompt, type:\n",
    "\n",
    "            source ~/.bash_profile\n",
    "\n",
    "    Then\n",
    "\n",
    "            echo $BPMS\n",
    "\n",
    "    It should show the value you set it to.\n",
    "\n",
    "    999. If you get stuck, or think you have messed up, copy the original bash_profile file back in place:\n",
    "\n",
    "        cp ~/.bash_profile.bak ~/.bash_profile\n",
    "\n",
    "    Then source that in a shell:\n",
    "\n",
    "        source ~/.bash_profile\n",
    "\n",
    "    to (mostly) set things back to how they were before. \n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Update `PATH`\n",
    "\n",
    "Recall that `PATH` is a list (separated by `:`) fo directories to search for executables, e.g.:\n",
    "```\n",
    "\n",
    "    PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n",
    "```\n",
    "\n",
    "Then, if we want to put a `librat` directory at the front of this path (so we look there first), we follow the following example syntax:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. PATH is /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n",
      "2. PATH is /Users/plewis/librat/src:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# example initial setting of PATH\n",
    "# NB Only an example, your shell will set something\n",
    "# different!\n",
    "PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n",
    "\n",
    "echo \"1. PATH is $PATH\"\n",
    "\n",
    "# change directory from docs/source up to root\n",
    "BPMS=${BPMS-$(pwd)};\n",
    "\n",
    "bin=$BPMS/src\n",
    "\n",
    "# put $bin on the front of PATH\n",
    "export PATH=\"$bin:$PATH\"\n",
    "\n",
    "echo \"2. PATH is $PATH\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "```\n",
    "EXERCISE\n",
    "\n",
    "    1. Edit your ~/.bash_profile to update your PATH variable\n",
    "    \n",
    "    You should type the following lines into the end of ~/.bash_profile:\n",
    "    \n",
    "    # replace this line below by BPMS= the location of your librat dist\n",
    "    BPMS=/Users/plewis/librat\n",
    "    bin=$BPMS/src\n",
    "    export PATH=\"$bin:$PATH\"\n",
    "    \n",
    "    \n",
    "    2. Save the file and quit the editor.\n",
    "\n",
    "    3. Open a new shell. At the command prompt, type:\n",
    "\n",
    "            source ~/.bash_profile\n",
    "\n",
    "    Then\n",
    "\n",
    "            echo $PATH\n",
    "\n",
    "    It should show the updated PATH variable.\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### `LD_LIBRARY_PATH`, `DYLD_LIBRARY_PATH`\n",
    "\n",
    "On some systems, `LD_LIBRARY_PATH` and/or `DYLD_LIBRARY_PATH` may be set in your `bash` shell. Just to make sure, we will set them in our examples. \n",
    "\n",
    "These variables tell an executable where to look for shared object libraries (libraries of functions stored on the computer). Again, they are simply lists of locations (directories) in the computer file system that the shell will look. Elements of the list are separated by `:`. so, if for example we have the `PATH`:\n",
    "\n",
    "```\n",
    "    LD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n",
    "    DYLD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n",
    "```\n",
    "\n",
    "then when an executable makes a call to a function in a shared object library, it will look first in `/usr/local/lib`, and then in `/usr/lib` for these libraries.\n",
    "\n",
    "\n",
    "### Update `LD_LIBRARY_PATH`, `DYLD_LIBRARY_PATH`\n",
    "\n",
    "We can again add search directories to the front of the library paths:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. LD_LIBRARY_PATH is /usr/local/lib:/usr/lib\n",
      "2. LD_LIBRARY_PATH is /Users/plewis/librat/src:/usr/local/lib:/usr/lib\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# example initial setting of LD_LIBRARY_PATH\n",
    "# NB Only an example, your shell will set something\n",
    "# different!\n",
    "LD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n",
    "\n",
    "echo \"1. LD_LIBRARY_PATH is $LD_LIBRARY_PATH\"\n",
    "\n",
    "# change directory from docs/source up to root\n",
    "lib=$BPMS/src\n",
    "\n",
    "# put $bin on the front of PATH\n",
    "export LD_LIBRARY_PATH=\"$lib:$LD_LIBRARY_PATH\"\n",
    "\n",
    "echo \"2. LD_LIBRARY_PATH is $LD_LIBRARY_PATH\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. DYLD_LIBRARY_PATH is /usr/local/lib:/usr/lib\n",
      "2. DYLD_LIBRARY_PATH is /Users/plewis/librat/src:/usr/local/lib:/usr/lib\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# example initial setting of DYLD_LIBRARY_PATH\n",
    "# NB Only an example, your shell will set something\n",
    "# different!\n",
    "DYLD_LIBRARY_PATH=\"/usr/local/lib:/usr/lib\"\n",
    "\n",
    "echo \"1. DYLD_LIBRARY_PATH is $DYLD_LIBRARY_PATH\"\n",
    "\n",
    "lib=$BPMS/src\n",
    "\n",
    "# put $bin on the front of PATH\n",
    "export DYLD_LIBRARY_PATH=\"$lib:$DYLD_LIBRARY_PATH\"\n",
    "\n",
    "echo \"2. DYLD_LIBRARY_PATH is $DYLD_LIBRARY_PATH\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "```\n",
    "EXERCISE\n",
    "\n",
    "    1. Similar to the previous exercise, edit your ~/.bash_profile to now update your LD_LIBRARY_PATH and DYLD_LIBRARY_PATH variables\n",
    "    \n",
    "    You should type the following lines into the end of ~/.bash_profile:\n",
    "    \n",
    "    # replace this line below by BPMS= the location of your librat dist\n",
    "    BPMS=/Users/plewis/librat\n",
    "    lib=$BPMS/src\n",
    "    export LD_LIBRARY_PATH=\"$lib:$LD_LIBRARY_PATH\"\n",
    "    export DYLD_LIBRARY_PATH=\"$lib:$DYLD_LIBRARY_PATH\"\n",
    "    \n",
    "    \n",
    "    2. Save the file and quit the editor.\n",
    "\n",
    "    3. Open a new shell. At the command prompt, type:\n",
    "\n",
    "            source ~/.bash_profile\n",
    "\n",
    "    Then\n",
    "\n",
    "            echo $LD_LIBRARY_PATH $DYLD_LIBRARY_PATH\n",
    "\n",
    "    It should show the updated variables.\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which operating system? `uname`, `if`\n",
    "\n",
    "Before proceeding, it is useful to see how to determine which operatinbg system we are using, and how to perform conditional statements in `bash`.\n",
    "\n",
    "Mostly, you can get information on which operating system you are using by using either `uname -s`. You may sometime have problems if you are using virtual machines of any sort, as the top level operating system may not be apparant.\n",
    "\n",
    "In the example below, we use `uname -s` to test for values of `MINGW64` (a common windows environment with compilers and some other useful features), `Darwin` (macOS of some sort), or other (assumed linux).\n",
    "\n",
    "We set the variabler `OS` to the result of running `uname -s`, then use bash conditional statement syntax:\n",
    "\n",
    "```\n",
    "if [ $VAR = value1 ] \n",
    "then\n",
    "  ... do something 1 ...\n",
    "elif [ $VAR = value2 ] \n",
    "then\n",
    "  ... do something 2 ...\n",
    "else\n",
    "  ... do something else ...\n",
    "fi\n",
    "```\n",
    "\n",
    "to test the options we consider. The syntax is a little fiddly. \n",
    "\n",
    "Note that the spaces in `if [ $VAR = value1 ]` are critical.\n",
    "Note that the `then` statements are also critical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am macOS: Darwin\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# these to see what sort of computer we are running on\n",
    "OS=$(uname -s)\n",
    "\n",
    "# print the first 5 lines in the shared object\n",
    "if [ $OS = MINGW64 ]\n",
    "then\n",
    "  echo \"I am windows: $OS\"\n",
    "elif [ $OS = Darwin ]\n",
    "then\n",
    "  echo \"I am macOS: $OS\"\n",
    "else\n",
    "  echo \"I am neither macOS nor MINGW64: $OS\"\n",
    "fi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Contents of libraries: `nm` or `ar`\n",
    "\n",
    "The libraries will have the suffix [dll](https://en.wikipedia.org/wiki/Dynamic-link_library) on windows systems. On various unix systems, they may be [so](https://en.wikipedia.org/wiki/Library_(computing)#Shared_libraries) or  for on `OS X`, [dylib](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html). Normally, you will only need `DYLD_LIBRARY_PATH` on `OS X`, but we might as well set it for all cases. If you want to see which functions are contained in a particular library then:\n",
    "\n",
    "On `OS X`:\n",
    "\n",
    "       nm -gU  src/libratlib.${ext}\n",
    "       \n",
    "Otherwise:\n",
    "\n",
    "        ar tv src/libratlib.${ext}\n",
    "\n",
    "where `${ext}` is `so` or `dll` or `dylib` as appropriate. We use the construct above for determining the operating system and for using `ar` or `nm` as appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Darwin\n",
      "00000000000475f0 T _Add_2D\n",
      "00000000000478b0 T _Affine_transform\n",
      "0000000000049180 T _B_allocate\n",
      "00000000000478e0 T _Backwards_affine_transform\n",
      "00000000000471a0 T _Bbox\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# these to see what sort of computer we are running on\n",
    "OS=$(uname -s)\n",
    "echo $OS\n",
    "\n",
    "lib=$BPMS/src\n",
    "\n",
    "\n",
    "# print the first 5 lines in the shared object\n",
    "if [ $OS = MINGW64 ]\n",
    "then\n",
    "  # windows\n",
    "  ar tv $lib/libratlib.dll | head -5\n",
    "elif [ $OS = Darwin ]\n",
    "then\n",
    "  # OS X\n",
    "  nm -gU $lib/libratlib.so | head -5\n",
    "else\n",
    "  # linux\n",
    "  ar tv $lib/libratlib.dll | head -5\n",
    "fi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "where we see that the shared object library for `librat` (in a file called `libratlib.${ext}`) contains some functions `_Add_2D()`, `_Affine_transform()` etc. which are part of the library we use.\n",
    "\n",
    "Notice that `lib.${ext}` is added on the end of a library name to give its filename."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Important environment variables for `librat`\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `cat <<EOF > output ... EOF`\n",
    "\n",
    "We can conveniently create files in `bash` from text in the bash shell. This is done using `cat` and defining a marker (often `EOF`, meaning End Of File), such as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "# change directory from docs/source up to root\n",
    "\n",
    "cat <<EOF > $BPMS/obj/second.obj\n",
    "# My first object file\n",
    "mtllib plants.matlib \n",
    "usemtl white \n",
    "v 0 0 0 \n",
    "v 0 0 1 \n",
    "plane -1 -2 \n",
    "!{\n",
    "usemtl white \n",
    "!{ \n",
    "v 0 0 1000 \n",
    "ell -1 30000 30000 1000 \n",
    "!} \n",
    "!}\n",
    "EOF"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at the file we have just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# My first object file\n",
      "mtllib plants.matlib \n",
      "usemtl white \n",
      "v 0 0 0 \n",
      "v 0 0 1 \n",
      "plane -1 -2 \n",
      "!{\n",
      "usemtl white \n",
      "!{ \n",
      "v 0 0 1000 \n",
      "ell -1 30000 30000 1000 \n",
      "!} \n",
      "!}\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "source examples_init.sh\n",
    "\n",
    "cat $BPMS/obj/second.obj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "EXERCISE\n",
    "\n",
    "Use the approach above (`cat <<EOF > output ... EOF`) to create your own text file, then check the contents are as you expected.\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `MATLIB`, `RSRLIB` etc.\n",
    "\n",
    "In `librat`, there is a considerable set of data that we need to describe world data for any particular simulation. For example, we need to have one or more object files giving the geometry, material files describing the spectral scattering properties of materials, sensor spectral response functions etc.\n",
    "\n",
    "To try to make models and simulation scenarios portable, we want to avoid 'hardwiring' these file locations. One way to do that is to simply use relative file names throughout the description, so that we can then determine the full filenames from some core base directory.\n",
    "\n",
    "If we happen to run the simulation *from* this directory, then clearly the relative filenames we use would directly describe all file locations.\n",
    "\n",
    "However, if we run the simulation from elsewhere on the system, we need a mechanism to describe the *base* of the scene description files. More generally, we might want to store spectral response files in one part of the file system, and spectral scattering properties elsewhere. In that case, we need a set of *base* descriptors for these different types of file.\n",
    "\n",
    "That is the file system philosophy used in `librat`. These *base* locations are defined by environment variables which we will describe below. Whilst you do not *have* to use these, it makes sense to set them up, even if they are all set to the same value (i.e. the *base* of the model files is the same for all file types).\n",
    "\n",
    "The following environmental variables can be used:\n",
    "\n",
    "\n",
    "| Name | File types |\n",
    "|:-:|:-:|\n",
    "| `MATLIB` | material library e.g. `plants.matlib`, all materials defined in a material library e.g. `white.dat`|\n",
    "| `ARARAT_OBJECT` | (extended) wavefront object files e.g. `first.obj`  |\n",
    "| `DIRECT_ILLUMINATION` | spectral files for direct illumination: those defined in `-RATdirect` command line option |\n",
    "| `RSRLIB` | sensor waveband files: those defined in `-RATsensor_wavebands` command line option |\n",
    "| `BPMS_FILES` | Not used |\n",
    "| `SKY_ILLUMINATION` | location of sky map image files: defined in `-RATskymap`  command line option |\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "As noted, you can set all of these to the same value, in which case the database of files is all defined relative to that point. This is the most typical use of `librat`. We illustrate this setup below for the `librat` distribution, where a set of examples use files from the directory `test/test_examples`.\n",
    "\n",
    "Additionally, the following environment variables can be set to extend the size of some aspects of the model. You would only need to use these in some extreme case.\n",
    "\n",
    "| Name | Purpose |\n",
    "|:-:|:-:|\n",
    "| `MAX_GROUPS` | Maximum number of groups allowed (100000) |\n",
    "| `PRAT_MAX_MATERIALS` | Maximum number of materials allowed (DEFAULT_PRAT_MAX_MATERIALS=1024 in `mtllib.h`) |\n",
    "| `MAX_SUNS` | Maximum number of suns (180 in `rat.h`) |\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%bash\n",
    "#\n",
    "# create examples_init.sh\n",
    "# for examples initialisation\n",
    "#\n",
    "# create the init shell\n",
    "cat <<EOF > $BPMS/bin/examples_init_test.sh\n",
    "#!/bin/bash\n",
    "#\n",
    "# defaults\n",
    "#\n",
    "export BPMS=\\${BPMS-$BPMS}\n",
    "export BPMSROOT=\\${BPMSROOT-\\$BPMSROOT}\n",
    "lib=\\${lib-\\$BPMS/src}\n",
    "bin=\\${bin-\\$BPMS/src}\n",
    "VERBOSE=\\${VERBOSE-0}\n",
    "export TEMP=\\${TEMP-/tmp}\n",
    "\n",
    "# set up required environment variables for bash\n",
    "export LD_LIBRARY_PATH=\"\\${lib}:\\${LD_LIBRARY_PATH}\"\n",
    "export DYLD_LIBRARY_PATH=\"\\${lib}:\\${DYLD_LIBRARY_PATH}\"\n",
    "export PATH=\"\\${bin}:\\${PATH}\"\n",
    "\n",
    "export MATLIB=\\$BPMSROOT\n",
    "export RSRLIB=\\$BPMSROOT\n",
    "export ARARAT_OBJECT=\\$BPMSROOT\n",
    "export DIRECT_ILLUMINATION=\\$BPMSROOT\n",
    "export BPMS_FILES=\\$BPMSROOT\n",
    "export SKY_ILLUMINATION==\\$BPMSROOT\n",
    "\n",
    "if [ \"\\$(which RATstart)\" == \"\\${bin}/RATstart\" ]\n",
    "then\n",
    "  if [ \"\\$VERBOSE\" == 1 ]; then\n",
    "      echo \"RATstart found ok\"\n",
    "  fi\n",
    "else\n",
    "  # we should create them\n",
    "  make clean all \n",
    "fi\n",
    "EOF\n",
    "chmod +x $BPMS/bin/examples_init_test.sh\n",
    "examples_init_test.sh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "In this chapter, we have covered a range of basic unix/linux and `bash` commands, so you should be able to navigate you way around a unix file system, and find your way back safely. Being familiar with these tools takes somne time of course, so you might now want to go on and take [some other unix/linux course](https://www.unixtutorial.org/basic-unix-commands) to see if you can deepen your understanding in that way. Alternatively, just spend some time exploring your system, looking to see what files are where, reading on the internet or help pages what they do, and so on.\n",
    "\n",
    "Maybe thats wishful thinking on my part though. You may not feel you have time for basic unix at the moment ... and we did say at the top of this chapter that it was not compulsory ... I'd reccomend you *do* spend some time on *unix* ... you'll develop skills that willlast you a lifetime! ;-)\n",
    "\n",
    "In practical terms, as we have said, the important thing here is that you can generate the file `examples_init_test.sh` and modify it to your needs."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
